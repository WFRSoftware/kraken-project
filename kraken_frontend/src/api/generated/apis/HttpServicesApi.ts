/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  FullHttpService,
  GetAllHttpServicesQuery,
  HttpServiceResultsPage,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    FullHttpServiceFromJSON,
    FullHttpServiceToJSON,
    GetAllHttpServicesQueryFromJSON,
    GetAllHttpServicesQueryToJSON,
    HttpServiceResultsPageFromJSON,
    HttpServiceResultsPageToJSON,
} from '../models';

export interface GetAllHttpServicesRequest {
    uuid: string;
    getAllHttpServicesQuery: GetAllHttpServicesQuery;
}

export interface GetHttpServiceRequest {
    wUuid: string;
    hsUuid: string;
}

/**
 * 
 */
export class HttpServicesApi extends runtime.BaseAPI {

    /**
     * List the http services of a workspace
     * List the http services of a workspace
     */
    async getAllHttpServicesRaw(requestParameters: GetAllHttpServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HttpServiceResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAllHttpServices.');
        }

        if (requestParameters.getAllHttpServicesQuery === null || requestParameters.getAllHttpServicesQuery === undefined) {
            throw new runtime.RequiredError('getAllHttpServicesQuery','Required parameter requestParameters.getAllHttpServicesQuery was null or undefined when calling getAllHttpServices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/httpServices/all`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetAllHttpServicesQueryToJSON(requestParameters.getAllHttpServicesQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HttpServiceResultsPageFromJSON(jsonValue));
    }

    /**
     * List the http services of a workspace
     * List the http services of a workspace
     */
    async getAllHttpServices(requestParameters: GetAllHttpServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HttpServiceResultsPage> {
        const response = await this.getAllHttpServicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all information about a single service
     * Retrieve all information about a single service
     */
    async getHttpServiceRaw(requestParameters: GetHttpServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullHttpService>> {
        if (requestParameters.wUuid === null || requestParameters.wUuid === undefined) {
            throw new runtime.RequiredError('wUuid','Required parameter requestParameters.wUuid was null or undefined when calling getHttpService.');
        }

        if (requestParameters.hsUuid === null || requestParameters.hsUuid === undefined) {
            throw new runtime.RequiredError('hsUuid','Required parameter requestParameters.hsUuid was null or undefined when calling getHttpService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{w_uuid}/httpServices/{hs_uuid}`.replace(`{${"w_uuid"}}`, encodeURIComponent(String(requestParameters.wUuid))).replace(`{${"hs_uuid"}}`, encodeURIComponent(String(requestParameters.hsUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullHttpServiceFromJSON(jsonValue));
    }

    /**
     * Retrieve all information about a single service
     * Retrieve all information about a single service
     */
    async getHttpService(requestParameters: GetHttpServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullHttpService> {
        const response = await this.getHttpServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
