/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpdateFindingAffectedRequest } from './UpdateFindingAffectedRequest';
import {
    UpdateFindingAffectedRequestFromJSON,
    UpdateFindingAffectedRequestFromJSONTyped,
    UpdateFindingAffectedRequestToJSON,
} from './UpdateFindingAffectedRequest';

/**
 * A finding's affected has been updated
 * @export
 * @interface WsMessageOneOf33
 */
export interface WsMessageOneOf33 {
    /**
     * The workspace the updated finding is in
     * @type {string}
     * @memberof WsMessageOneOf33
     */
    workspace: string;
    /**
     * The finding which has been updated
     * @type {string}
     * @memberof WsMessageOneOf33
     */
    finding: string;
    /**
     * The affected's uuid
     * @type {string}
     * @memberof WsMessageOneOf33
     */
    affectedUuid: string;
    /**
     * 
     * @type {UpdateFindingAffectedRequest}
     * @memberof WsMessageOneOf33
     */
    update: UpdateFindingAffectedRequest;
    /**
     * 
     * @type {string}
     * @memberof WsMessageOneOf33
     */
    type: WsMessageOneOf33TypeEnum;
}


/**
 * @export
 */
export const WsMessageOneOf33TypeEnum = {
    UpdatedFindingAffected: 'UpdatedFindingAffected'
} as const;
export type WsMessageOneOf33TypeEnum = typeof WsMessageOneOf33TypeEnum[keyof typeof WsMessageOneOf33TypeEnum];


/**
 * Check if a given object implements the WsMessageOneOf33 interface.
 */
export function instanceOfWsMessageOneOf33(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "finding" in value;
    isInstance = isInstance && "affectedUuid" in value;
    isInstance = isInstance && "update" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function WsMessageOneOf33FromJSON(json: any): WsMessageOneOf33 {
    return WsMessageOneOf33FromJSONTyped(json, false);
}

export function WsMessageOneOf33FromJSONTyped(json: any, ignoreDiscriminator: boolean): WsMessageOneOf33 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workspace': json['workspace'],
        'finding': json['finding'],
        'affectedUuid': json['affected_uuid'],
        'update': UpdateFindingAffectedRequestFromJSON(json['update']),
        'type': json['type'],
    };
}

export function WsMessageOneOf33ToJSON(value?: WsMessageOneOf33 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workspace': value.workspace,
        'finding': value.finding,
        'affected_uuid': value.affectedUuid,
        'update': UpdateFindingAffectedRequestToJSON(value.update),
        'type': value.type,
    };
}

